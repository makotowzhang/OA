@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>资料库管理</title>
    @Html.Partial("~/Views/Shared/_Head.cshtml")
    @Html.Partial("~/Views/Shared/_Svg.cshtml")
    <style>
    </style>
</head>
<body>
    <div id="App" ref="App" v-loading="Loading.bodyLoading">
        <template>
            <div ref="QueryFormDiv">
                <el-form :model="QueryFormData" :inline="true" label-width="80px" class="Query_Form" ref="QueryForm" @@submit.native.prevent>
                    <el-row>
                        <el-col :span="8">
                            <el-form-item label="文件名" prop="FileName">
                                <el-input v-model="QueryFormData.FileName" placeholder="请输入文件名"></el-input>
                            </el-form-item>
                        </el-col>
                        <el-col :span="8">
                            <el-form-item label="文件分类" prop="FileClassify">
                                <el-select v-model="QueryFormData.FileClassify"
                                           placeholder="请选择文件分类"
                                           multiple
                                           collapse-tags>
                                    <el-option v-for="item in SelectOption.fileClassify"
                                               :key="item.Id"
                                               :label="item.ItemDesc"
                                               :value="item.Id">
                                    </el-option>
                                </el-select>
                            </el-form-item>
                        </el-col>
                        <el-col :span="8">
                            <el-form-item label="开始时间" prop="BeginTime">
                                <el-date-picker v-model="QueryFormData.BeginTime"
                                                type="datetime"
                                                placeholder="选择日期时间"
                                                :clearable="true">
                                </el-date-picker>
                            </el-form-item>
                        </el-col>
                        
                    </el-row>
                    <el-row>
                        <el-col :span="8">
                            <el-form-item label="结束时间" prop="EndTime">
                                <el-date-picker v-model="QueryFormData.EndTime"
                                                type="datetime"
                                                placeholder="选择日期时间"
                                                :clearable="true">
                                </el-date-picker>
                            </el-form-item>
                        </el-col>
                        <el-col :span="8">&nbsp;</el-col>
                        <el-col :span="8">
                            <el-form-item>
                                <el-button type="primary" @@click="onQuery" icon="el-icon-search">查询</el-button>
                                <el-button type="primary" @@click="resetQueryForm" icon="el-icon-refresh">重置</el-button>
                            </el-form-item>
                        </el-col>
                    </el-row>
                  
                </el-form>
                <el-row class="Table_Button_Row">
                    <el-col :span="24">
                        <el-button type="primary" v-if="ActionPermission.Add" ref="btnAdd" @@click="openAddDialog" icon="icon iconfont icon-file-add">新增</el-button>
                        <el-button type="primary" v-if="ActionPermission.Edit" :disabled="ButtonState.btnEdit" ref="btnEdit" @@click="openEditDialog" icon="icon iconfont icon-edit">编辑</el-button>
                        <el-button type="danger" v-if="ActionPermission.Delete" :disabled="ButtonState.btnDelete" ref="btnDelete" @@click="deleteClick" icon="icon iconfont icon-delete">删除</el-button>
                        <el-button type="primary" v-if="ActionPermission.Preview" :disabled="ButtonState.btnPreview" ref="btnPreview" @@click="previewFiles" icon="icon iconfont icon-eye">预览</el-button>
                        <el-button type="primary" v-if="ActionPermission.Download" :disabled="ButtonState.btnDownload" ref="btnDownload" @@click="downloadFiles" icon="icon iconfont icon-download">下载</el-button>
                    </el-col>
                </el-row>
            </div>
            <el-table ref="dataTable"
                      :data="tableData"
                      :border="true"
                      :height="tableHeight"
                      @@selection-change="selectChange"
                      @@row-click="rowClick"
                      style="width: 100%;margin-top:20px;"
                      element-loading-text="拼命加载中"
                      element-loading-spinner="el-icon-loading"
                      element-loading-background="rgba(200, 200,200, 0.5)"
                      v-loading="Loading.tableLoading">
                <el-table-column type="index"
                                 :index="showIdex"
                                 label=" ">
                </el-table-column>
                <el-table-column type="selection"
                                 width="50">
                </el-table-column>
                <el-table-column prop="FileName"
                                 label="文件名"
                                 width="300">
                    <template slot-scope="scope">
                       
                        <svg class="icon" style="font-size:26px;width:1em;height:1em;position:relative;top:7px;"  aria-hidden="true">
                            <use :xlink:href="getFileIcon(scope.row)" ></use>
                        </svg>
                        {{scope.row.FileName}}
                    </template>
                </el-table-column>
                <el-table-column prop="FileClassifyName"
                                 label="文件分类"
                                 width="180">
                </el-table-column>
                <el-table-column prop="CreateUserName"
                                 label="上传人"
                                 width="100">
                </el-table-column>

                <el-table-column prop="CreateTime"
                                 label="上传时间"
                                 width="200">
                    <template slot-scope="scope">
                        {{ DateFormat(scope.row.CreateTime,'yyyy-MM-dd HH:mm:ss') }}
                    </template>
                </el-table-column>



            </el-table>
            <div ref="Pagination">
                <el-pagination @@size-change="handleSizeChange"
                               @@current-change="handleCurrentChange"
                               :current-page.sync="QueryFormData.Page"
                               :page-size.sync="QueryFormData.PageSize"
                               :page-sizes="PaginationData.pageSizes"
                               layout="total, sizes, prev, pager, next, jumper"
                               :total="PaginationData.total"
                               style="width:100%;padding-left:20px;box-sizing:border-box">
                </el-pagination>
            </div>
            <el-dialog :close-on-click-modal="false" :title="Dialog.addDialogTitle"
                       :visible.sync="Dialog.addDialog"
                       :limit="1"
                       width="600px"
                       top="50px">
                <el-form :model="AddFormData" size="medium" :rules="AddFormRule" label-width="80px" ref="AddForm" @@submit.native.prevent>
                    <el-form-item label="文件名" prop="FileName">
                        <el-input v-model="AddFormData.FileName" placeholder="请输入文件名"></el-input>
                    </el-form-item>
                    <el-form-item label="文件分类" prop="FileClassify">
                        <el-select v-model="AddFormData.FileClassify"
                                   collapse-tags
                                   placeholder="请选择">
                            <el-option v-for="item in SelectOption.fileClassify"
                                       :key="item.Id"
                                       :label="item.ItemDesc"
                                       :value="item.Id">
                            </el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="上传文件" prop="FileTempPath" ref="FileTempPathFormItem">
                        <el-upload class="upload-demo" 
                                   drag
                                   action="FileUpload"
                                   :file-list.sync="Upload.fileList"
                                   :before-upload="beforeUpload"
                                   :on-remove="onRemove"
                                   :on-success="onSuccess"
                                   @*accept="application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,
                                                   application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,
                                                   application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation,         
                                                   application/pdf"*@>
                            <i class="el-icon-upload"></i>
                            <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>
                        </el-upload>
                    </el-form-item>
                </el-form>
                <span slot="footer" class="dialog-footer">
                    <el-button type="primary" @@click="submitAddForm">保 存</el-button>
                    <el-button @@click="cancelAddForm">取 消</el-button>
                </span>
            </el-dialog>
            <iframe id="downloadFrame" name="downloadFrame" style="display:none">

            </iframe>
            <form action="Download" method="post" target="downloadFrame" ref="DownloadForm">
                <input type="hidden" name="list" ref="listHidden"/>
            </form>
        </template>
    </div>
</body>
</html>
<script>
    $vue = new Vue({
        el: "#App",
        data: {
            QueryFormData: {
                FileName:"",
                FileClassify: [],
                BeginTime: "",
                EndTime:"",
                Page: 1,
                PageSize: 10,
            },
            tableData: [],
            tableHeight: 500,
            ButtonState: {
                btnEdit: true,
                btnDelete: true,
                btnDownload: true,
                btnPreview:true
            },
            Dialog: {
                addDialog: false,
                addDialogTitle:"",
                editDialog: false
            },
            AddFormData: {
                Id: null,
                FileName: "",
                FileClassify: "",
                FileTempPath: ""
            },
            AddFormRule: {
                FileName: [
                    { required: true, message: '请输入文件名', trigger: 'change' },
                    { max: 25, message: '长度不能超过25个字符', trigger: 'change' }
                ],
                FileClassify: [
                    { required: true, message: '请选择文件分类', trigger: 'change' }
                ],
                FileTempPath:[
                    { required: true, message: '请选择上传文件', trigger: 'change' }
                ]
            },
            SelectOption: {
                fileClassify: []
            },
            Loading: {
                bodyLoading: false,
                tableLoading: false
            },
            PaginationData: {
                pageSizes: [10, 20, 50, 100],
                total: 0
            },
            PaginationFilter: {
            },
            ActionPermission: {
                Add: false,
                Edit: false,
                Delete: false,
                Download: false,
                Preview: false
            },
            Upload: {
                fileList:[]
            }
        },
        methods: {
            onQuery: function () {
                this.QueryFormData.Page = 1;
                this.PaginationFilter = JSON.parse(JSON.stringify(this.QueryFormData));
                getList();
            },
            showIdex: function (index) {
                return (this.QueryFormData.Page - 1) * this.QueryFormData.PageSize + 1 + index;
            },
            resetQueryForm: function () {
                this.$refs.QueryForm.resetFields();
            },
            openAddDialog: function () {
                this.Dialog.addDialog = true;
                this.Dialog.addDialogTitle = "新增";
                this.AddFormData.Id = null;
                this.AddFormData.FileName = "";
                this.AddFormData.FileClassify = "";
                this.AddFormData.FileTempPath = "";
                this.Upload.fileList = [];
                setTimeout(function () { $vue.$refs.AddForm.clearValidate(); }, 0);
            },
            openEditDialog: function () {
                axios.post("GetFileModel", { id: this.$refs.dataTable.selection[0].Id }).then(function (response) {
                   $vue.Dialog.addDialog = true;
                   $vue.Dialog.addDialogTitle = "编辑";
                   $vue.AddFormData.Id = response.data.Id;
                   $vue.AddFormData.FileName = response.data.FileName;
                   $vue.AddFormData.FileClassify = response.data.FileClassify;
                   $vue.AddFormData.FileTempPath = "###";
                   $vue.Upload.fileList = [{ name: response.data.FileName }];
                   setTimeout(function () { $vue.$refs.AddForm.clearValidate(); }, 0);
                });
            
            }, 
            submitAddForm: function () {
                this.$refs.AddForm.validate(function (success, validateobj) {
                    if (success) {
                        $vue.Loading.bodyLoading = true;
                        axios.post("Save", $vue.AddFormData).then(function (response) {
                            ActionCommonHandle(response.data, $vue, "保存成功", "保存失败", getList());
                        }).catch(function (error) {
                            ErrorCommonHandle($vue);
                        }).finally(function () {
                            $vue.Loading.bodyLoading = false;
                            $vue.Dialog.addDialog = false;
                        });
                    }
                });
            },
            cancelAddForm: function () {
                this.Dialog.addDialog = false;
            },           
            deleteClick: function () {
                this.$confirm('是否确认删除这' + this.$refs.dataTable.selection.length + '行数据', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(function () {
                    $vue.Loading.bodyLoading = true;
                    axios.post("Delete", $vue.$refs.dataTable.selection).then(function (response) {
                        $vue.Loading.bodyLoading = false;
                        ActionCommonHandle(response.data, $vue, "删除成功", "删除失败", getList());
                    }).catch(function (error) {
                        ErrorCommonHandle($vue);
                    }).finally(function () {
                        $vue.Loading.bodyLoading = false;
                    });
                }).catch(function () {
                    $vue.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            selectChange: function (selectValue) {
                if (this.$refs.dataTable.selection.length == 0) {
                    this.ButtonState.btnEdit = true;
                    this.ButtonState.btnPreview = true;
                    this.ButtonState.btnDelete = true;
                    this.ButtonState.btnDownload = true;
                }
                else if (this.$refs.dataTable.selection.length == 1) {
                    this.ButtonState.btnEdit = false;
                    this.ButtonState.btnPreview = false;
                    this.ButtonState.btnDelete = false;
                    this.ButtonState.btnDownload = false;
                }
                else {
                    this.ButtonState.btnEdit = true;
                    this.ButtonState.btnPreview = true;
                    this.ButtonState.btnDelete = false;
                    this.ButtonState.btnDownload = false;
                }
            },
            rowClick: function (row, event, column) {
                this.$refs.dataTable.toggleRowSelection(row);
            },
            beforeUpload: function (file) {
                var typeArr = ["doc", "docx", "xls", "xlsx", "ppt", "pptx", "pdf"];
                var flag = true;
                for (var i = 0; i < typeArr.length; i++) {
                    if (typeArr[i] == file.name.split(".")[1].toLowerCase()) {
                        flag = false;
                    }
                   
                }
                if (flag) {
                    $Msg.info("请上传doc, docx, xls, xlsx, ppt, pptx, pdf类型的文件");
                    return false;
                }
                if (this.AddFormData.FileTempPath != null && this.AddFormData.FileTempPath != "") {
                    return this.$confirm('是否替换已上传的文件?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    });
                }
            },
            onRemove: function (file, fileList) {
                //if (file.path == this.AddFormData.FileTempPath) {
                //    this.AddFormData.FileTempPath = "";
                //}
                this.AddFormData.FileTempPath = "";
            },
            onSuccess: function (response, file, fileList) {
                file.path = response;
                this.AddFormData.FileTempPath = response;
                var newList = new Array();
                newList.push(file);
                this.Upload.fileList = newList;
                if (this.AddFormData.FileName == "")
                {
                    this.AddFormData.FileName = file.name.split(".")[0];
                }
                this.$refs.FileTempPathFormItem.clearValidate();
            },
            handleSizeChange: function (val) {
                if (this.QueryFormData.Page > (this.PaginationData.total / val + 1)) {
                    return;
                }
                this.PaginationFilter.Page = this.QueryFormData.Page;
                this.PaginationFilter.PageSize = val;
                getList(this.PaginationFilter);
            },
            handleCurrentChange: function (val) {
                this.PaginationFilter.Page = val;
                this.PaginationFilter.PageSize = this.QueryFormData.PageSize;
                getList(this.PaginationFilter);
            },
            closeAddDialog: function (done) {
                done();
            },
            previewFiles: function () {
                axios.post("GetFileModel", { id: this.$refs.dataTable.selection[0].Id }).then(function (response) {
                    if (response.data.CanPreview) {
                        var url = "/Scripts/PDFJS/web/viewer.html?file=" + encodeURI(response.data.PreviewPath);
                        var tabName = Math.random().toString();
                        top.$app.editableTabs.push({
                            title: '文件预览-' + response.data.FileName,
                            name: tabName,
                            content: url,
                            closable: true,
                            url: url,
                            IconClass:"icon iconfont icon-eye"
                        });
                        top.$app.editableTabsValue = tabName;
                    }
                    else {
                        $Msg.info("服务器正在对文件进行处理请稍后再预览！");
                    }
                });
            },
            downloadFiles: function () {
                this.Loading.bodyLoading = true;
                this.$refs.listHidden.value = JSON.stringify(this.$refs.dataTable.selection);
                this.$refs.DownloadForm.submit();
                setTimeout(function () {
                    axios.get("GetDownloadStatus").then(function () {
                        $vue.Loading.bodyLoading = false;
                    });
                }, 500);
            },
            getFileIcon: function (row) {
                if (row.FileType == "Word") {
                    return "#icon-word";
                }
                if (row.FileType == "Excel") {
                    return "#icon-excel";
                }
                if (row.FileType == "PowerPoint") {
                    return "#icon-ppt";
                }
                if (row.FileType == "PDF") {
                    return "#icon-pdf";
                }

            },
            DateFormat: DateFormat
        }

    });

    function getList(filter) {
        if (filter == null) {
            filter = $vue.QueryFormData;
        }
        $vue.$refs.dataTable.clearSelection();
        $vue.ButtonState.btnEdit = true;
        $vue.ButtonState.btnDelete = true;
        $vue.Loading.tableLoading = true;
        axios.post("GetFileList", filter).then(function (response) {
            $vue.Loading.tableLoading = false;
            $vue.tableData = response.data.List;
            $vue.PaginationData.total = response.data.Total;
        }).catch(function (error) {
            $vue.Loading.tableLoading = false;
            $vue.tableData = [];
            $vue.PaginationData.total = 0;
            $vue.$message({
                type: 'error',
                message: '服务器出错'
            });
        });
    }

    window.onresize = function () {
        $vue.tableHeight = $vue.$refs.App.getBoundingClientRect().height -
            $vue.$refs.QueryFormDiv.getBoundingClientRect().height -
            $vue.$refs.Pagination.getBoundingClientRect().height - 20;
    }
    getList();
    axios.post("/Dictionary/GetGroupItemList", { groupCode: "DataLibraryType"}).then(function (response) {
        $vue.SelectOption.fileClassify = response.data;
    }).catch(function (error) {
        console.log(error);
    });

    GetActionAuthorize($vue);
</script>